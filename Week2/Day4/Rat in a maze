class Solution {
    public static ArrayList<String> findPath(int[][] m, int n) {
        // Your code here
        ArrayList<String>ans=new ArrayList<>();
        if(m[0][0]==0)
        return ans;
        String path="";
        boolean[][] visited=new boolean[n][n];
        solve(m,visited,0,0,n,path,ans);
        return ans;
    }
    
    static void solve(int[][] grid,boolean[][] visited,int i,int j,int n,String str,ArrayList<String>ans){
        if(i==n-1 && j==n-1){
            ans.add(str);
            return;
        }
        visited[i][j]=true;
        if(isSafe(i,j-1,n,grid,visited))
            solve(grid,visited,i,j-1,n,str+"L",ans);
        if(isSafe(i,j+1,n,grid,visited))
            solve(grid,visited,i,j+1,n,str+"R",ans);
        if(isSafe(i-1,j,n,grid,visited))
            solve(grid,visited,i-1,j,n,str+"U",ans);
        if(isSafe(i+1,j,n,grid,visited))
            solve(grid,visited,i+1,j,n,str+"D",ans);
        visited[i][j]=false;
    }
    
    static boolean isSafe(int i,int j,int n,int[][] grid,boolean[][] visited){
        if(i>=0 && j>=0 && i<n && j<n && grid[i][j]==1 && !visited[i][j]){
            return true;
        }
        return false;
    }
}