class Solution
{
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        // Write your code here
        ArrayList<ArrayList<Pair>>adjList=new ArrayList<>();
        int[] dist=new int[V];
        Arrays.fill(dist,Integer.MAX_VALUE);
        dist[S]=0;
        Queue<Pair>q=new PriorityQueue<>((a,b)->a.dist-b.dist);
        q.offer(new Pair(S,0));
        while(!q.isEmpty()){
            Pair curr=q.poll();
            int node=curr.node;
            int dis=curr.dist;
            for(int i=0;i<adj.get(node).size();i++){
                int neigh=adj.get(node).get(i).get(0);
                int wt=adj.get(node).get(i).get(1);
                if(dis+wt<dist[neigh]){
                    dist[neigh]=dis+wt;
                    q.offer(new Pair(neigh,dist[neigh]));
                }
            }
        }
        return dist;
    }
}

class Pair{
    int node,dist;
    Pair(int node,int dist)
    {
        this.node=node;
        this.dist=dist;
    }
}