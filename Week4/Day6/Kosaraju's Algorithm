class Solution
{
    //Function to find number of strongly connected components in the graph.
    public int kosaraju(int V, ArrayList<ArrayList<Integer>> adj)
    {
        //code here
        Stack<Integer> st=new Stack<>();
        boolean[] visited=new boolean[V];
        for(int i=0;i<V;i++){
            if(!visited[i]){
                dfs1(i,adj,visited,st);
            }
        }
        ArrayList<ArrayList<Integer>> new_adj=new ArrayList<>();
        for(int i=0;i<V;i++){
            new_adj.add(new ArrayList<>());
        }
        for(int i=0;i<V;i++){
            visited[i]=false;
            for(int it:adj.get(i)){
                new_adj.get(it).add(i);
            }
        }
        int cnt=0;
        while(!st.isEmpty()){
            int i=st.pop();
            if(!visited[i]){
                cnt++;
                dfs2(i,new_adj,visited);
            }
        }
        return cnt;
    }
    static void dfs1(int node,ArrayList<ArrayList<Integer>> adj,boolean[] visited,Stack<Integer> st){
        visited[node]=true;
        for(int num:adj.get(node)){
            if(!visited[num])
                dfs1(num,adj,visited,st);
        }
        st.push(node);
    }
    static void dfs2(int node,ArrayList<ArrayList<Integer>> adj,boolean[] visited){
        visited[node]=true;
        for(int num:adj.get(node)){
            if(!visited[num])
                dfs2(num,adj,visited);
        }
    } 
}