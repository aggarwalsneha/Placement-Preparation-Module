class Solution 
{
    //Function to find maximum of minimums of every window size.
    static int[] maxOfMin(int[] arr, int n) 
    {
        // Your code here
        int[] left=new int[n];
        int[] right=new int[n];
        Stack<Integer>st1=new Stack<Integer>();
        Stack<Integer>st2=new Stack<Integer>();
        
        for(int i=0;i<n;i++){
            while(!st1.isEmpty() && arr[st1.peek()]>=arr[i])
            st1.pop();
            
            left[i]=st1.isEmpty()?-1:st1.peek();
            
            st1.push(i);
        }
        for(int i=n-1;i>=0;i--){
            while(!st2.isEmpty() && arr[st2.peek()]>=arr[i])
            st2.pop();
            
            right[i]=st2.isEmpty()?n:st2.peek();
            
            st2.push(i);
        }
        
        int[] ans=new int[n];
        for(int i=0;i<n;i++){
            int len=right[i]-left[i]-2;
            ans[len]=Math.max(arr[i],ans[len]);
        }
        for(int i=n-2;i>=0;i--){
            if(ans[i]<ans[i+1])
            ans[i]=ans[i+1];
        }
        return ans;
    }
}