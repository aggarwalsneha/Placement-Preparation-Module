class Solution
{
   static ArrayList<Integer> ans;
	ArrayList <Integer> boundary(Node node)
	{
	    ans=new ArrayList<>();
    	if(node==null)
    	   return ans;
	    ans.add(node.data);
	    if(isLeaf(node))
	    return ans;
	    left(node.left);
	    leaves(node);
	    right(node.right);
	    return ans;
	}
	
	static boolean isLeaf(Node root)
	{
	    return (root.left==null) && (root.right==null);
	}
	static void left(Node root)
	{
	    if(root==null)
	    return;
        if(root.left!=null){
            ans.add(root.data);
            left(root.left);
        }
        else if(root.right!=null){
            ans.add(root.data);
            left(root.right);
        }
	}
	static void leaves(Node root)
	{
	        if(root==null)
	        return;
	        if(isLeaf(root)){
	        ans.add(root.data);
	        return;
	        }
	        leaves(root.left);
	        leaves(root.right);
	}
	
	static void right(Node root)
	{
	    if(root==null)
	    return;
        if(root.right!=null){
            right(root.right);
            ans.add(root.data);
        }
        else if(root.left!=null){
            right(root.left);
            ans.add(root.data);
        }
	}
}